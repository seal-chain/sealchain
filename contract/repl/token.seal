;;
;; Token contract model.
;;
;; === test keyset ===
(env-data {"admin-keyset" {"keys" ["ADMIN"]}
           "owner-keyset" {"keys" ["OWNER"]}
           "consume-keyset" {"keys" ["CONSUME"]}})
(env-keys ["ADMIN"])

(define-keyset 'admin-keyset (read-keyset "admin-keyset"))

(defcontract token 'admin-keyset

  ;; ==== real estate table ====
  (defrecord tokens
      [^string token
       ^string type
       ^string info
       ^string sendable
       ^decimal price
       ^decimal total-shares
       ^decimal available-shares])

  (deftable tokens-table ^{tokens}) ;; key: ^string token-id

  ;; ==== stake holder table ====
  (defrecord stakeholder
      [^address token-id
       ^address holder
       ^string is-owner
       ^decimal shares  ;; or credits
       ])

  (deftable stakeholder-table ^{stakeholder}) ;; key: ^string (hash token-id holder)

  ;; ==== revenue table ====
  (defrecord revenue
    [
    ^address token-id
    ^address from
    ^string tx-id
    ^decimal total-shares
    ^decimal total-bonus
    ^decimal avg-bonus
    ^string info
    ])

  (deftable revenue-table ^{revenue})

  ;; ==== bonus table ====
  ; (defrecord bonus
  ;   [
  ;   ^address token-id
  ;   ^address account
  ;   ^decimal shares
  ;   ^decimal amount
  ;   ])

  ; (deftable bonus-table ^{bonus})


  ;; ==== issue table ====
  (defrecord issues
    [
    ^address token-id
    ^address account
    ^string tx-id
    ^decimal issue-shares
    ^decimal issue-price 
    ^string info
    ])

  (deftable issue-table ^{issues})

  (defn new
    [token-id token type sendable info]
    (enforce-keyset 'admin-keyset)
    (with-default-read tokens-table token-id 
      {:price -1.0}
      {price :price}
      (enforce (= price -1.0) "token exists already")
      (insert tokens-table token-id
              {:token            token,
               :type             type,
               :info             info,
               :sendable         sendable,
               :price            0.0,
               :total-shares     0.0,
               :available-shares 0.0})
      ))


  (defn issue
    [token-id account issue-shares issue-price info]
    (enforce-keyset 'admin-keyset)
    (enforce (< 0.0 issue-shares) "issue-shares must be a positive decimal")
    (enforce (< 0.0 issue-price) "issue-price must be a positive decimal")
    (with-default-read tokens-table token-id
      {:price -1.0}
      {price :price ,total-shares :total-shares, available-shares :available-shares}
      (enforce (not= -1.0 price) "token-id not exists")
      (update tokens-table token-id
              {:total-shares (+ total-shares issue-shares),
               :available-shares (+ available-shares issue-shares),
               :price issue-price,
               :info info})
      (let [holder-id (hash [token-id account])
            tx-id (tx-hash)
            ]
        (with-default-read stakeholder-table holder-id
          {:shares -1}
          {shares :shares}
          (if (= shares -1)
            (insert stakeholder-table holder-id {:shares issue-shares ,
                                                 :token-id token-id ,
                                                 :holder account, 
                                                 :is-owner "1"})
            (update stakeholder-table holder-id {:shares (+ shares issue-shares), 
                                                 :is-owner "1"})
            )
          )
        (insert issue-table (hash [token-id tx-id]) {:token-id token-id, 
                                                     :account account, 
                                                     :tx-id tx-id ,
                                                     :issue-shares issue-shares ,
                                                     :issue-price issue-price,
                                                     :info info})
        )
      ))


  (defn dividend-one 
    [account token-id revenue-id avg-bonus holder]
    (let [amount (* avg-bonus (get holder "shares"))
          holder-account (get holder "holder")
          bonus-id (hash [holder-account revenue-id])
          ]
      (gd-send account holder-account amount)
      ; (insert bonus-table bonus-id {:token-id token-id, 
      ;                               :account holder-account ,
      ;                               :shares (get holder "shares") ,
      ;                               :amount amount})
      amount))



  (defn dividend 
    [token-id avg-bonus account info]
    ; (enforce-key account)
    (enforce (< 0.0 avg-bonus) "avg-bonus must be a positive decimal")
    (with-read tokens-table token-id
      {available-shares :available-shares, total-shares:total-shares}
      (let [total-bonus (* avg-bonus total-shares)
            tx-id       (tx-hash)
            revenue-id  (hash [token-id tx-id])
            accounts (select stakeholder-table 
                             ['token-id 'holder 'is-owner 'shares] 
                             (and? (where 'shares (< 0.0)) (where 'token-id (= token-id))))
            total (reduce (+) 0 (map
                                 (dividend-one account token-id revenue-id avg-bonus)
                                 accounts))]
        (enforce (= total total-bonus) "bonus not completely")
        (insert revenue-table revenue-id {:token-id     token-id,
                                          :from         account,
                                          :total-shares total-shares,
                                          :total-bonus  total-bonus,
                                          :avg-bonus    avg-bonus,
                                          :info         info,
                                          :tx-id        tx-id}))
      ))

  (defn- transfer
    [token-id from to amount sendable]
    (let [from-id (hash [token-id from])
          to-id   (hash  [token-id to])]
      (with-default-read stakeholder-table from-id
        {:shares -1.0, :is-owner "0"}
        {from-shares :shares, from-is-owner :is-owner}
        (with-default-read stakeholder-table to-id
          {:shares -1.0,:is-owner "0"}
          {to-shares :shares, to-is-owner :is-owner}
          (enforce-one "token must sendable or either of 'from' or 'to' must be owner" 
                       [(enforce (= sendable "true") "token must sendable") 
                        (enforce (or (= from-is-owner "1") (= to-is-owner "1")) "either of 'from' or 'to' must be owner")])
          (enforce (>= from-shares amount) "Insufficient shares for transfer")
          (update stakeholder-table from-id {:shares (- from-shares amount)})
          (if (= to-shares -1.0)
            (insert stakeholder-table to-id {:shares   amount,
                                             :token-id token-id,
                                             :is-owner "0",
                                             :holder   to})
            (update stakeholder-table to-id {:shares (+ to-shares amount)}))
          ))
      ))

  (defn send
    [token-id from to amount]
    ;;TODO need enforce this on prod
    (enforce-key from)
    (enforce (not= to from) "Can't send to yourself")
    (enforce (< 0.0 amount) "Amount must be a positive decimal")
    (with-default-read tokens-table token-id
      {:price -1.0}
      {price    :price,sendable :sendable}
      (enforce (not= -1.0 price) "token-id not exists")
      (transfer token-id from to amount sendable)
      ))

  (defn balance
    [account]
    (select stakeholder-table ['token-id 'shares ]
            (where 'holder (= account)))
    )

)

(create-table tokens-table)
(create-table stakeholder-table)
(create-table revenue-table)
; (create-table bonus-table)
(create-table issue-table)

;; === test code ===
(new "12333" "ABC" "GF" "info" "false")
(new "12355" "ABC" "GF" "info" "true")

"=== issue token-id 12333 num 500 price 1.2 ==="
(issue "12333" "OWNER" 500.0 1.2 "info")

"=== tokens-table ==="
(select tokens-table  (where 'price (not= 0.0)))
"=== tokens-table ==="
(select issue-table  (where 'issue-price (not= 0.0)))
"=== stakeholder-table ==="
(select stakeholder-table  (where 'shares (< 0.0)))

; (env-keys ["OWNER"])
(send "12333" "OWNER" "CONSUME1" 11.0)

(send "12333" "OWNER" "CONSUME2" 22.0)

(send "12333" "OWNER" "CONSUME3" 33.0)

"=== dividend times 1 avg is 2.0 ==="
(env-hash (hash "dividend1"))
(dividend "12333" 2.0 "OWNER" "info")
"1.=== tokens-table ==="
(select tokens-table  (where 'price (not= 0.0)))
"1.=== issue-table ==="
(select issue-table  (where 'issue-price (not= 0.0)))
"1.=== stakeholder-table ==="
(select stakeholder-table  (where 'shares (not= 0.0)))
; "1.=== bonus-table ==="
; (select bonus-table  (where 'shares (not= 0.0)))
"1.=== revenue-table ==="
(select revenue-table  (where 'total-shares (not= 0.0)))


"=== issue token-id 12333 num 1000 price 1.9 ==="
(issue "12333" "OWNER" 1000.0 1.9 "info")

"=== dividend times 2 avg is 1.1 ==="
(env-hash (hash "dividend2"))
(dividend "12333" 1.1 "OWNER" "info")
"2.=== tokens-table ==="
(select tokens-table  (where 'price (not= 0.0)))
"2.=== issue-table ==="
(select issue-table  (where 'issue-price (not= 0.0)))
"2.=== stakeholder-table ==="
(select stakeholder-table  (where 'shares (not= 0.0)))
; "2.=== bonus-table ==="
; (select bonus-table  (where 'shares (not= 0.0)))
"2.=== revenue-table ==="
(select revenue-table  (where 'total-shares (not= 0.0)))