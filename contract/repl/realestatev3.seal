;;
;; RealEstate contract model, version III.
;;


(defcontract realestateContract admin-address

  ;;(defevent transfer-event [^address from ^address to ^string token-id])
  
  (defrecord realestate
      [^decimal total-shares
       ^decimal available-shares
       ^decimal curr-price
       ^address creator
       ^address cfo])

  (deftable realestate-table ^{realestate}) ;; key: ^string token-id

  (defrecord stakeholder
      [^address owner
       ^decimal shares])

  (deftable stakeholder-table ^{stakeholder}) ;; key: ^string (hash token-id holder)

  (defrecord allowance
    [^decimal allowed
     ^keyset owner
     ^keyset spender])

  ;; use (hash [sender receiver]) as id
  (deftable allowance-table ^{allowance})

  (defn- get-hash [owner spender]
    (hash [owner spender]))

  (defn get-allowance [owner spender]
    (with-default-read allowance-table
      (get-hash owner spender)
      { :allowed -1 }
      { allowed :allowed }
      allowed))

  (defn create-realestate
    [token-id total-shares buy-price sell-price cfo]
    (let [me (MSG_SENDER)]
      (enforce (= admin-address me) "need admin")
      (insert realestate-table token-id
              {:buy-price       buy-price
               :sell-price sell-price
               :total-shares     total-shares
               :available-shares total-shares
               :creator          me
               :cfo              cfo})))

  (defn total-shares [token-id]
    (with-read realestate-table token-id
      {shares :total-shares}
      shares))
  
  (defn available-shares [token-id]
    (with-read realestate-table token-id
      {shares :available-shares}
      shares))

  (defn change-price [token-id buy-price sell-price]
    (enforce (= admin-address (MSG_SENDER)) "need admin")
    (update realestate-table token-id
            {:buy-price buy-price :sell-price sell-price}))

  (defn- upsert-add [table key field amount]
    (with-default-read table key {field -1} {old-amount field}
      (if (= -1 old-amount)
        (insert table key {field amount})
        (update table key {field (+ amount old-amount)}))))

  (defn buy-shares [token-id shares]
    (enforce (>= shares 300) "Invalid Shares")
    (with-read realestate-table token-id
      {buy-price :buy-price
       available-shares :available-shares
       cfo :cfo}
      (enforce (>= available-shares shares) "Insufficient Available Shares")
      (let [cost (* buy-price shares)
            me (MSG_SENDER)
            id (get-hash token-id me)]
        (send cfo me cost) ;; send to from value
        (upsert-add stakeholder-table id :shares shares)
        (update realestate-table token-id {:available-shares (- available-shares shares)}))))

  (defn sell-shares [token-id shares]
    (let [me (MSG_SENDER)
          id (get-hash token-id me)]
      (with-default-read realestate-table token-id
        {sell-price       :sell-price
         available-shares :available-shares
         cfo              :cfo}
        (with-default-read stakeholder-table id
          {:shares -1}
          {owner :owner hold-shares :shares}
          ;; (enforce (= owner me) "wrong owner")
          (enforce (not= (-1 hold-shares)))
          (enforce (>= hold-shares shares) "Not Enough Shares")
          (send me cfo (* curr-price shares))
          (update realestate-table token-id {:available-shares (+ available-shares shares)})
          (update stakeholder-table id {:shares (- hold-shares shares)})))))

  (defn shares-of [token-id]
    (let [me (MSG_SENDER)]
      (with-read stakeholder-table (get-hash token-id me)
        {shares :shares}
        shares)))

  (defn approve [owner spender amount]
    (let [allowed (get-allowance owner spender)]
     (if (= -1 allowed)
       (insert allowance-table
               (get-hash owner spender)
               { :allowed amount
                , :owner owner
                , :spender spender })
       (update allowance-table
               (get-hash owner spender)
               { :allowed (+ allowed amount)
                , :owner owner
                , :spender spender}))))

  (defn dividend-one [per-share cfo id]
    (with-read
      stakeholder-table id
      {id :id owner :owner shares :shares}
      (if (= id (get-hash token-id me))
        (approve cfo owner (* per-share shares)))))
  
  (defn dividend [token-id per-share]
    (with-read realestate-table token-id
      {total-shares :total-shares cfo :cfo}
      (let [per-share (/ amount total-shares)]
        (map (dividend-one per-share cfo) (keys stakeholder-table)))))

  (defn claim-income [token-id]
    (let [me (MSG_SENDER)]
     (with-read realestate-table token-id
       {cfo :cfo}
       (let [allowed (get-allowance cfo me)]
         (if (not= -1 allowed)
           (send (MSG_SENDER) cfo allowed))
         (if (not= -1 allowed)
           (update allowance-table
                   (get-hash cfo me)
                   { :allowed 0
                    , :owner owner
                    , :spender spender }))))))

)
